import React, { useState } from 'react';

const ResultsViewer = ({ results, onNewTest }) => {
  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–∞–∫ –º–∞—Å—Å–∏–≤, –¥–∞–∂–µ –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –æ–¥–∏–Ω –æ–±—ä–µ–∫—Ç
  const allResults = Array.isArray(results) ? results : [results];

  if (!allResults.length) {
    return <div>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è</div>;
  }

  const [showJson, setShowJson] = useState(false);

  return (
    <div className="results-viewer">
      <div className="results-header">
        <h2>üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è</h2>
        <button onClick={() => setShowJson(!showJson)} className="json-toggle">
          {showJson ? '–°–∫—Ä—ã—Ç—å JSON' : '–ü–æ–∫–∞–∑–∞—Ç—å JSON'}
        </button>
      </div>

      {/* –û–±—â–∞—è —Å–≤–æ–¥–∫–∞ (–µ—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤) */}
      {allResults.length > 1 && (
        <div className="summary-section">
          <h3>üõ†Ô∏è –û–±—â–∞—è —Å–≤–æ–¥–∫–∞</h3>
          <div className="stats-grid">
            <div className="stat-card">
              <div className="stat-value">{allResults.length}</div>
              <div className="stat-label">–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π</div>
            </div>
            <div className="stat-card">
              <div className="stat-value">
                {Math.round(allResults.reduce((sum, r) => sum + (r.processing_time_ms || 0), 0) / allResults.length)}ms
              </div>
              <div className="stat-label">–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è</div>
            </div>
          </div>
        </div>
      )}

      {/* –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –∫–∞–∂–¥–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é */}
      <div className="results-list">
        {allResults.map((result, index) => {
          const {
            transaction_id,
            sequence_number,
            status,
            raw_url,
            viz_url,
            processing_time_ms,
            summary,
            detected_items,
            missing_items,
            alerts,
            filename,
          } = result;

          const isIncomplete = summary.total_detected < 11;

          return (
            <div key={index} className={`result-item ${isIncomplete ? 'incomplete' : ''}`}>
              <div className="transaction-info">
                <span>–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: <strong>{transaction_id}</strong></span>
                <span>–ù–æ–º–µ—Ä: <strong>#{sequence_number}</strong></span>
                <span>–°—Ç–∞—Ç—É—Å: <strong>{status}</strong></span>
                {isIncomplete && <span className="incomplete-warning">‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤</span>}
              </div>

              {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ */}
              <div className="stats-section">
                <h3>üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h3>
                <div className="stats-grid">
                  <div className="stat-card">
                    <div className="stat-value">{processing_time_ms}ms</div>
                    <div className="stat-label">–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏</div>
                  </div>
                </div>
              </div>

              {/* –°–≤–æ–¥–∫–∞ –ø–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º */}
              <div className="summary-section">
                <h3>üõ†Ô∏è –°–≤–æ–¥–∫–∞</h3>
                <div className={`summary-card ${summary.status}`}>
                  <div className="summary-main">
                    <div className="summary-numbers">
                      <span className="detected">{summary.total_detected}</span>
                      <span className="separator">–∏–∑</span>
                      <span className="expected">{summary.total_expected}</span>
                    </div>
                    <div className="summary-percent">
                      {summary.match_percent}%
                    </div>
                  </div>
                  <div className="summary-status">
                    {summary.status === 'success' ? '‚úÖ –í—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –Ω–∞–π–¥–µ–Ω—ã' : '‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞'}
                  </div>
                </div>
              </div>

              {/* –û–ø–æ–≤–µ—â–µ–Ω–∏—è */}
              {alerts && alerts.length > 0 && (
                <div className="alerts-section">
                  <h3>‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ</h3>
                  {alerts.map((alert, idx) => (
                    <div key={idx} className="alert-card">
                      <div className="alert-icon">‚ö†Ô∏è</div>
                      <div className="alert-content">{alert}</div>
                    </div>
                  ))}
                </div>
              )}

              {/* –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã (–æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–∞—è —Å–µ–∫—Ü–∏—è) */}
              <div className="tools-section">
                <h3>üõ†Ô∏è –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã</h3>
                <div className="tools-grid">
                  <div className="tool-card">
                    <h4>–ù–∞–π–¥–µ–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:</h4>
                    <ul className="tool-list">
                      {detected_items.map((tool, idx) => (
                        <li key={idx} className="tool-item">
                          <span className="tool-check">‚úÖ</span>
                          <span className="tool-name">{tool.class_name}</span>
                          <span className="tool-confidence">({tool.aggregated_confidence.toFixed(2)})</span>
                        </li>
                      ))}
                    </ul>
                    <h4>–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:</h4>
                    <ul className="tool-list">
                      {missing_items.map((tool, idx) => (
                        <li key={idx} className="tool-item">
                          <span className="tool-check">‚ùå</span>
                          <span className="tool-name">{tool.name}</span>
                        </li>
                      ))}
                    </ul>
                  </div>
                </div>
              </div>

              {/* –°—Å—ã–ª–∫–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è */}
              {(raw_url || viz_url) && (
                <div className="image-links">
                  <h3>üì∑ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</h3>
                  {raw_url && (
                    <a href={raw_url} target="_blank" rel="noopener noreferrer" className="action-button primary">
                      –°—ã—Ä–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    </a>
                  )}
                  {viz_url && (
                    <a href={viz_url} target="_blank" rel="noopener noreferrer" className="action-button primary">
                      –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
                    </a>
                  )}
                </div>
              )}
            </div>
          );
        })}
      </div>

      {/* JSON-–æ—Ç—á–µ—Ç */}
      {showJson && (
        <div className="json-section">
          <h3>üìã JSON-–æ—Ç—á–µ—Ç</h3>
          <div className="json-container">
            {allResults.map((result, index) => (
              <pre key={index} className="json-pre">
                {JSON.stringify(result, null, 2)}
              </pre>
            ))}
          </div>
        </div>
      )}

      {/* –î–µ–π—Å—Ç–≤–∏—è */}
      <div className="actions-section">
        <button onClick={onNewTest} className="action-button secondary">
          üß™ –ù–æ–≤—ã–π —Ç–µ—Å—Ç
        </button>
      </div>
    </div>
  );
};

export default ResultsViewer;