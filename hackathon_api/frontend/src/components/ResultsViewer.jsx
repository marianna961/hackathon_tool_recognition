import React from 'react';

const ResultsViewer = ({ results, onNewTest }) => {
  const { transaction_id, sequence_number, processing_info, detection_results, files_processed } = results;

  return (
    <div className="results-viewer">
      <div className="results-header">
        <h2>üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è</h2>
        <div className="transaction-info">
          <span>–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: <strong>{transaction_id}</strong></span>
          <span>–ù–æ–º–µ—Ä: <strong>#{sequence_number}</strong></span>
        </div>
      </div>

      {/* Processing Statistics */}
      <div className="stats-section">
        <h3>üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏</h3>
        <div className="stats-grid">
          <div className="stat-card">
            <div className="stat-value">{processing_info.total_images_processed}</div>
            <div className="stat-label">–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π</div>
          </div>
          <div className="stat-card">
            <div className="stat-value">{processing_info.avg_processing_time_ms}ms</div>
            <div className="stat-label">–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è</div>
          </div>
          <div className="stat-card">
            <div className="stat-value">{processing_info.mode}</div>
            <div className="stat-label">–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã</div>
          </div>
          <div className="stat-card">
            <div className="stat-value">{processing_info.flops}</div>
            <div className="stat-label">–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å</div>
          </div>
        </div>
      </div>

      {/* Detection Summary */}
      <div className="summary-section">
        <h3>üõ†Ô∏è –°–≤–æ–¥–∫–∞ –ø–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º</h3>
        <div className={`summary-card ${detection_results.summary.status}`}>
          <div className="summary-main">
            <div className="summary-numbers">
              <span className="detected">{detection_results.summary.total_detected}</span>
              <span className="separator">–∏–∑</span>
              <span className="expected">{detection_results.summary.total_expected}</span>
            </div>
            <div className="summary-percent">
              {detection_results.summary.match_percent}%
            </div>
          </div>
          <div className="summary-status">
            {detection_results.summary.status === 'success' ? '‚úÖ –í—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –Ω–∞–π–¥–µ–Ω—ã' : '‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞'}
          </div>
        </div>
      </div>

      {/* Alerts */}
      {detection_results.alerts.length > 0 && (
        <div className="alerts-section">
          <h3>‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ, —Ç—Ä–µ–±—É—é—Ç —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏:</h3>
          {detection_results.alerts.map((alert, index) => (
            <div key={index} className="alert-card">
              <div className="alert-icon">‚ö†Ô∏è</div>
              <div className="alert-content">
                <div className="alert-message">{alert.message}</div>
                {alert.images_requiring_check && (
                  <div className="alert-details">
                    –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {alert.images_requiring_check.join(', ')}
                  </div>
                )}
                {alert.missing_tools && (
                  <div className="alert-details">
                    –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç: {alert.missing_tools.join(', ')}
                  </div>
                )}
              </div>
            </div>
          ))}
        </div>
      )}

      {/* Detected Tools */}
      <div className="tools-section">
        <h3>‚úÖ –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:</h3>
        <div className="tools-grid">
          {detection_results.detected_items.map((tool, index) => (
            <div key={index} className="tool-card">
              <div className="tool-header">
                <span className="tool-name">{tool.class_name}</span>
                <span className="tool-confidence">{tool.confidence_avg}</span>
              </div>
              <div className="tool-details">
                <span>–ù–∞–π–¥–µ–Ω –≤ {tool.frames_seen} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö</span>
                <span>ID: {tool.class_id}</span>
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* Missing Tools */}
      {detection_results.missing_items.length > 0 && (
        <div className="missing-section">
          <h3>‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:</h3>
          <div className="missing-grid">
            {detection_results.missing_items.map((tool, index) => (
              <div key={index} className="missing-card">
                <div className="missing-name">{tool.name}</div>
                <div className="missing-id">ID: {tool.class_id}</div>
              </div>
            ))}
          </div>
        </div>
      )}

      {/* Actions */}
      <div className="actions-section">
        <a 
          href="http://localhost:9001" 
          target="_blank" 
          rel="noopener noreferrer"
          className="action-button primary"
        >
          üìÅ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ MinIO
        </a>
        <button onClick={onNewTest} className="action-button secondary">
          üß™ –ù–æ–≤—ã–π —Ç–µ—Å—Ç
        </button>
      </div>

      {/* Files Processed */}
      <div className="files-section">
        <h3>üìÑ –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:</h3>
        <div className="files-list">
          {files_processed.slice(0, 10).map((file, index) => (
            <div key={index} className={`file-item ${file.status}`}>
              <span className="file-name">{file.filename}</span>
              <span className="file-status">
                {file.status === 'success' ? `‚úÖ ${file.detected_count} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤` : '‚ùå –û—à–∏–±–∫–∞'}
              </span>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
};

export default ResultsViewer;